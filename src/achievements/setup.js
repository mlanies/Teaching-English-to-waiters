export async function setupAchievements(db) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ
    const achievementsCount = await db.prepare(
      'SELECT COUNT(*) as count FROM achievements'
    ).first();

    if (achievementsCount.count > 0) {
      console.log('Achievements already set up');
      return;
    }

    console.log('Setting up achievements...');

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = [
      {
        name: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫",
        icon: "üéØ",
        requirement_type: "lessons_completed",
        requirement_value: 1,
        experience_reward: 50
      },
      {
        name: "–ù–∞—á–∏–Ω–∞—é—â–∏–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 —É—Ä–æ–∫–æ–≤",
        icon: "üçΩÔ∏è",
        requirement_type: "lessons_completed",
        requirement_value: 5,
        experience_reward: 100
      },
      {
        name: "–û–ø—ã—Ç–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 20 —É—Ä–æ–∫–æ–≤",
        icon: "üë®‚Äçüç≥",
        requirement_type: "lessons_completed",
        requirement_value: 20,
        experience_reward: 300
      },
      {
        name: "–ú–∞—Å—Ç–µ—Ä —Å–µ—Ä–≤–∏—Å–∞",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 50 —É—Ä–æ–∫–æ–≤",
        icon: "üèÜ",
        requirement_type: "lessons_completed",
        requirement_value: 50,
        experience_reward: 500
      },
      {
        name: "–û—Ç–ª–∏—á–Ω–∏–∫",
        description: "–ü–æ–ª—É—á–∏—Ç–µ 100% –∑–∞ —É—Ä–æ–∫",
        icon: "‚≠ê",
        requirement_type: "score",
        requirement_value: 100,
        experience_reward: 200
      },
      {
        name: "–ë—ã—Å—Ç—Ä—ã–π —É—á–µ–Ω–∏–∫",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Ä–æ–∫ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 –º–∏–Ω—É—Ç—ã",
        icon: "‚ö°",
        requirement_type: "time_spent",
        requirement_value: 120,
        experience_reward: 150
      },
      {
        name: "–£–ø–æ—Ä–Ω—ã–π",
        description: "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥",
        icon: "üî•",
        requirement_type: "streak_days",
        requirement_value: 3,
        experience_reward: 100
      },
      {
        name: "–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫",
        description: "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
        icon: "üíé",
        requirement_type: "streak_days",
        requirement_value: 7,
        experience_reward: 300
      },
      {
        name: "–ù–æ–≤–∏—á–æ–∫",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 2 —É—Ä–æ–≤–Ω—è",
        icon: "üìà",
        requirement_type: "level",
        requirement_value: 2,
        experience_reward: 100
      },
      {
        name: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
        icon: "üöÄ",
        requirement_type: "level",
        requirement_value: 5,
        experience_reward: 400
      },
      {
        name: "–≠–∫—Å–ø–µ—Ä—Ç",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è",
        icon: "üëë",
        requirement_type: "level",
        requirement_value: 10,
        experience_reward: 1000
      },
      {
        name: "–ü—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é",
        icon: "üëã",
        requirement_type: "category_completed",
        requirement_value: 1, // greeting category
        experience_reward: 200
      },
      {
        name: "–ó–Ω–∞—Ç–æ–∫ –º–µ–Ω—é",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–µ–Ω—é",
        icon: "üìã",
        requirement_type: "category_completed",
        requirement_value: 2, // menu category
        experience_reward: 200
      },
      {
        name: "–ú–∞—Å—Ç–µ—Ä –∑–∞–∫–∞–∑–æ–≤",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ –ø—Ä–∏–µ–º—É –∑–∞–∫–∞–∑–æ–≤",
        icon: "üìù",
        requirement_type: "category_completed",
        requirement_value: 3, // ordering category
        experience_reward: 200
      },
      {
        name: "–ö–∞—Å—Å–∏—Ä",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ",
        icon: "üí≥",
        requirement_type: "category_completed",
        requirement_value: 4, // payment category
        experience_reward: 200
      },
      {
        name: "–°–ø–∞—Å–∞—Ç–µ–ª—å",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º",
        icon: "üö®",
        requirement_type: "category_completed",
        requirement_value: 5, // emergency category
        experience_reward: 200
      }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for (const achievement of achievements) {
      await db.prepare(`
        INSERT INTO achievements (name, description, icon, requirement_type, requirement_value, experience_reward)
        VALUES (?, ?, ?, ?, ?, ?)
      `).bind(
        achievement.name,
        achievement.description,
        achievement.icon,
        achievement.requirement_type,
        achievement.requirement_value,
        achievement.experience_reward
      ).run();
    }

    console.log(`Created ${achievements.length} achievements`);
    return true;

  } catch (error) {
    console.error('Error setting up achievements:', error);
    throw error;
  }
}

export async function checkAndAwardAchievements(db, userId, userStats) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await db.prepare(
      'SELECT * FROM achievements ORDER BY requirement_value ASC'
    ).all();

    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAchievements = await db.prepare(`
      SELECT achievement_id FROM user_achievements WHERE user_id = ?
    `).bind(userId).all();

    const earnedAchievementIds = userAchievements.results.map(ua => ua.achievement_id);
    const newAchievements = [];

    for (const achievement of achievements.results) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (earnedAchievementIds.includes(achievement.id)) {
        continue;
      }

      let shouldAward = false;

      switch (achievement.requirement_type) {
        case 'lessons_completed':
          shouldAward = userStats.total_lessons_completed >= achievement.requirement_value;
          break;
        case 'level':
          shouldAward = userStats.level >= achievement.requirement_value;
          break;
        case 'streak_days':
          shouldAward = userStats.streak_days >= achievement.requirement_value;
          break;
        case 'score':
          // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –±–∞–ª–ª–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫
          shouldAward = userStats.last_lesson_score >= achievement.requirement_value;
          break;
        case 'time_spent':
          // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫
          shouldAward = userStats.last_lesson_time <= achievement.requirement_value;
          break;
      }

      if (shouldAward) {
        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º
        await db.prepare(`
          INSERT INTO user_achievements (user_id, achievement_id)
          VALUES (?, ?)
        `).bind(userId, achievement.id).run();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        await db.prepare(`
          UPDATE users 
          SET experience_points = experience_points + ?
          WHERE id = ?
        `).bind(achievement.experience_reward, userId).run();

        newAchievements.push(achievement);
      }
    }

    return newAchievements;

  } catch (error) {
    console.error('Error checking achievements:', error);
    return [];
  }
}
