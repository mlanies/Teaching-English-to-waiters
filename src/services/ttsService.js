// TTS Service –¥–ª—è Deepgram API –≤ Cloudflare Workers
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è API –∫–ª—é—á–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∫ —Å–∏–Ω—Ç–µ–∑—É (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤)
function prepareTextForTTS(text) {
  if (!text || typeof text !== 'string') {
    return text;
  }

  let prepared = text.trim();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
  prepared = prepared
    // –ü–∞—É–∑—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
    .replace(/,/g, ', ...')
    // –ü–∞—É–∑—ã –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏–π
    .replace(/:/g, ': ...')
    // –ü–∞—É–∑—ã –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫ —Å –∑–∞–ø—è—Ç–æ–π
    .replace(/;/g, '; ...')
    // –ü–∞—É–∑—ã –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    .replace(/\./g, '...')
    .replace(/!/g, '...!')
    .replace(/\?/g, '...?')
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .trim();

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞—É–∑—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!prepared.endsWith('...')) {
    prepared += '...';
  }

  return prepared;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Deepgram API
export async function synthesizeSpeech(text, options = {}) {
  const {
    voice = "nova",
    model = "aura-asteria-en",
    env = null // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä env
  } = options;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    const apiKey = env?.DEEPGRAM_API_KEY || globalThis.DEEPGRAM_API_KEY;
    if (!apiKey) {
      throw new Error('DEEPGRAM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞
    const telegramToken = env?.TELEGRAM_BOT_TOKEN || globalThis.TELEGRAM_BOT_TOKEN;
    if (!telegramToken) {
      console.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    const preparedText = prepareTextForTTS(text);
    
    console.log(`üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: "${text}"`);
    console.log(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${preparedText}"`);
    console.log(`üé≠ –ì–æ–ª–æ—Å: ${voice}`);

    // –í—ã–∑—ã–≤–∞–µ–º Deepgram API
    const response = await fetch('https://api.deepgram.com/v1/speak', {
      method: 'POST',
      headers: {
        'Authorization': `Token ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: preparedText
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Deepgram API error: ${response.status} - ${errorText}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    const audioBuffer = await response.arrayBuffer();
    
    console.log(`‚úÖ –ê—É–¥–∏–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–æ: ${(audioBuffer.byteLength / 1024).toFixed(2)} KB`);

    return {
      success: true,
      buffer: audioBuffer,
      size: audioBuffer.byteLength,
      contentType: response.headers.get('content-type') || 'audio/mpeg'
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ "${text}":`, error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram
export async function sendAudioToTelegram(chatId, audioBuffer, caption = '', options = {}) {
  try {
    const {
      filename = 'speech.mp3',
      contentType = 'audio/mpeg',
      env = null // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä env
    } = options;

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    
    // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ ArrayBuffer
    const audioBlob = new Blob([audioBuffer], { type: contentType });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData –¥–ª—è audio
    formData.append('audio', audioBlob, filename);
    formData.append('chat_id', chatId);
    
    if (caption) {
      formData.append('caption', caption);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      formData.append('parse_mode', 'HTML');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramToken = env?.TELEGRAM_BOT_TOKEN || globalThis.TELEGRAM_BOT_TOKEN;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Telegram:`);
    console.log(`   - Chat ID: ${chatId}`);
    console.log(`   - Filename: ${filename}`);
    console.log(`   - Content-Type: ${contentType}`);
    console.log(`   - Size: ${(audioBuffer.byteLength / 1024).toFixed(2)} KB`);
    console.log(`   - Token: ${telegramToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    const response = await fetch(`https://api.telegram.org/bot${telegramToken}/sendAudio`, {
      method: 'POST',
      body: formData
    });

    console.log(`üì° Telegram API Response Status: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Telegram API Error Response: ${errorText}`);
      throw new Error(`Telegram API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ${result.ok ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    
    return {
      success: true,
      messageId: result.ok ? result.result.message_id : null
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram:`, error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∏–Ω—Ç–µ–∑ + –æ—Ç–ø—Ä–∞–≤–∫–∞
export async function synthesizeAndSendSpeech(chatId, text, options = {}) {
  const {
    voice = "nova",
    caption = '',
    filename = 'speech.mp3',
    env = null // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä env
  } = options;

  try {
    // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å
    const synthesisResult = await synthesizeSpeech(text, { voice, env });
    
    if (!synthesisResult.success) {
      return {
        success: false,
        error: synthesisResult.error
      };
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª
    let sendResult = await sendAudioToTelegram(chatId, synthesisResult.buffer, caption, {
      filename,
      contentType: synthesisResult.contentType,
      env: env
    });

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!sendResult.success) {
      console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`);
      
      sendResult = await sendVoiceToTelegram(chatId, synthesisResult.buffer, caption, {
        filename: 'voice.ogg',
        contentType: 'audio/ogg',
        env: env
      });
    }

    return {
      success: sendResult.success,
      error: sendResult.error,
      size: synthesisResult.size
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ synthesizeAndSendSpeech:`, error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ sendAudio)
export async function sendVoiceToTelegram(chatId, audioBuffer, caption = '', options = {}) {
  try {
    const {
      filename = 'voice.ogg',
      contentType = 'audio/ogg',
      env = null
    } = options;

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const formData = new FormData();
    
    // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ ArrayBuffer
    const audioBlob = new Blob([audioBuffer], { type: contentType });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData –¥–ª—è voice
    formData.append('voice', audioBlob, filename);
    formData.append('chat_id', chatId);
    
    if (caption) {
      formData.append('caption', caption);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      formData.append('parse_mode', 'HTML');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramToken = env?.TELEGRAM_BOT_TOKEN || globalThis.TELEGRAM_BOT_TOKEN;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:`);
    console.log(`   - Chat ID: ${chatId}`);
    console.log(`   - Filename: ${filename}`);
    console.log(`   - Content-Type: ${contentType}`);
    console.log(`   - Size: ${(audioBuffer.byteLength / 1024).toFixed(2)} KB`);
    
    const response = await fetch(`https://api.telegram.org/bot${telegramToken}/sendVoice`, {
      method: 'POST',
      body: formData
    });

    console.log(`üì° Telegram API Response Status: ${response.status}`);

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Telegram API Error Response: ${errorText}`);
      throw new Error(`Telegram API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ${result.ok ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
    
    return {
      success: true,
      messageId: result.ok ? result.result.message_id : null
    };

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:`, error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–û–∑–≤—É—á–∏—Ç—å"
export function createVoiceButton(text, callbackData = null) {
  return {
    text: 'üîä –û–∑–≤—É—á–∏—Ç—å',
    callback_data: callbackData || `voice_${btoa(text).slice(0, 20)}` // –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è callback_data
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ "–û–∑–≤—É—á–∏—Ç—å"
export function parseVoiceCallback(callbackData) {
  if (callbackData.startsWith('voice_')) {
    const encodedText = callbackData.slice(6); // –£–±–∏—Ä–∞–µ–º 'voice_'
    try {
      const text = atob(encodedText); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
      return { type: 'voice', text };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:', error);
      return null;
    }
  }
  return null;
}
