// –°–µ—Ä–≤–∏—Å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Text-to-Speech) —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram

export class TTSService {
  constructor(ai, telegramService) {
    this.ai = ai;
    this.telegram = telegramService;
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  async speakEnglishAndSend(chatId, text, caption = null) {
    try {
      console.log('TTS: Generating audio for text:', text);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testText = text.length > 50 ? text.substring(0, 50) + '...' : text;
      console.log('TTS: Using test text:', testText);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ TTS –º–æ–¥–µ–ª–∏
      let response;
      try {
        console.log('TTS: Trying MeloTTS model...');
        response = await this.ai.run('@cf/myshell-ai/melotts', {
          prompt: testText,
          lang: 'en'
        });
      } catch (error) {
        console.log('TTS: MeloTTS failed, trying OpenAI TTS...');
        response = await this.ai.run('@cf/openai/tts-1', {
          text: testText,
          voice: 'alloy'
        });
      }

      console.log('TTS: Response received, type:', typeof response);
      console.log('TTS: Response keys:', Object.keys(response || {}));
      console.log('TTS: Response is array:', Array.isArray(response));
      console.log('TTS: Response length:', response?.length || 'undefined');
      
      if (Array.isArray(response)) {
        console.log('TTS: Array elements:', response.length);
        response.forEach((item, index) => {
          console.log(`TTS: Element ${index} type:`, typeof item);
          console.log(`TTS: Element ${index} length:`, item?.length || 'undefined');
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!response) {
        throw new Error('Empty audio response from TTS model');
      }

      // MeloTTS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
      const audioData = response[0] || response; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–∞–º –æ–±—ä–µ–∫—Ç
      
      if (!audioData) {
        throw new Error('No audio data in TTS response');
      }

      console.log('TTS: Audio data type:', typeof audioData);
      console.log('TTS: Audio data length:', audioData?.length || 'undefined');
      console.log('TTS: Audio data constructor:', audioData?.constructor?.name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—É—Ñ–µ—Ä –∏–ª–∏ ArrayBuffer
      if (audioData instanceof ArrayBuffer) {
        console.log('TTS: Audio data is ArrayBuffer, converting to Uint8Array');
        const uint8Array = new Uint8Array(audioData);
        console.log('TTS: Uint8Array length:', uint8Array.length);
        console.log('TTS: First 10 bytes:', Array.from(uint8Array.slice(0, 10)));
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–æ–±—Ö–æ–¥–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è voice)
      const audioResult = await this.telegram.sendDocument(chatId, audioData, {
        caption: caption || `üîä "${text}"`,
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        lang: 'en',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å –º–µ–¥–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  async speakSlowlyAndSend(chatId, text, caption = null) {
    try {
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: text,
        lang: 'en' // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: caption || `üêå –ú–µ–¥–ª–µ–Ω–Ω–æ: "${text}"`,
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        lang: 'en',
        speed: 'slow',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in slow TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –ø–æ —Å–ª–æ–≥–∞–º
  async speakWithPronunciationAndSend(chatId, text, caption = null) {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
      const words = text.split(' ');
      const slowText = words.join(' ... ');
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: slowText,
        lang: 'en'
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: caption || `üìñ –ü–æ —Å–ª–æ–≥–∞–º: "${text}"`,
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        slowText: slowText,
        lang: 'en',
        speed: 'pronunciation',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in pronunciation TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
  async speakDialogueAndSend(chatId, dialogue, caption = null) {
    try {
      const fullText = Array.isArray(dialogue) ? dialogue.join('\n\n') : dialogue;
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: fullText,
        lang: 'en'
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: caption || `üí¨ –î–∏–∞–ª–æ–≥: "${fullText.substring(0, 100)}..."`,
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: fullText,
        lang: 'en',
        type: 'dialogue',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in dialogue TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: dialogue
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
  async speakExampleAndSend(chatId, example) {
    try {
      let textToSpeak = '';
      let caption = '';
      
      if (Array.isArray(example.english)) {
        // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        textToSpeak = example.english.join('\n\n');
        caption = `üí¨ ${example.title}\n\nüá∑üá∫ ${example.russian.join('\n')}\n\nüá∫üá∏ ${example.english.join('\n')}`;
      } else {
        // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ—Ä–∞–∑
        textToSpeak = example.english;
        caption = `üìö ${example.title}\n\nüá∑üá∫ ${example.russian}\n\nüá∫üá∏ ${example.english}\n\nüìù ${example.context}`;
      }

      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: textToSpeak,
        lang: 'en'
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: caption,
        title: example.title,
        performer: 'English for Waiters'
      });

      return {
        success: true,
        audio: response,
        prompt: textToSpeak,
        russian: example.russian,
        conprompt: example.context,
        lang: 'en',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in example TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: example.english
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
  async speakWithRepeatAndSend(chatId, text, repeatCount = 2) {
    try {
      const repeatedText = Array(repeatCount).fill(text).join('\n\n');
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: repeatedText,
        lang: 'en'
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: `üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (${repeatCount}x): "${text}"`,
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        repeatedText: repeatedText,
        lang: 'en',
        repeatCount: repeatCount,
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in repeat TTS and send:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
  async speakLessonWithAnalysis(chatId, question, userAnswer, aiAnalysis) {
    try {
      let textToSpeak = '';
      let caption = '';

      if (aiAnalysis.correct_answer) {
        textToSpeak = `Correct answer: ${aiAnalysis.correct_answer}. Your answer: ${userAnswer}`;
        caption = `üìù <b>–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞</b>\n\n` +
          `‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> ${question.text}\n\n` +
          `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> ${aiAnalysis.correct_answer}\n` +
          `üí¨ <b>–í–∞—à –æ—Ç–≤–µ—Ç:</b> ${userAnswer}\n\n` +
          `üìä <b>–û—Ü–µ–Ω–∫–∞:</b> ${Math.round(aiAnalysis.score * 100)}%\n` +
          `üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> ${aiAnalysis.explanation}`;
      } else {
        textToSpeak = `Question: ${question.text}. Your answer: ${userAnswer}`;
        caption = `üìù <b>–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞</b>\n\n` +
          `‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> ${question.text}\n\n` +
          `üí¨ <b>–í–∞—à –æ—Ç–≤–µ—Ç:</b> ${userAnswer}\n\n` +
          `üìä <b>–û—Ü–µ–Ω–∫–∞:</b> ${Math.round(aiAnalysis.score * 100)}%\n` +
          `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> ${aiAnalysis.suggestions}`;
      }

      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: textToSpeak,
        lang: 'en'
      });

      const audioResult = await this.telegram.sendDocument(chatId, response[0] || response, {
        caption: caption,
        parse_mode: 'HTML',
        filename: 'pronunciation.mp3'
      });

      return {
        success: true,
        audio: response,
        prompt: textToSpeak,
        lang: 'en',
        telegramResult: audioResult
      };
    } catch (error) {
      console.error('Error in lesson TTS and send:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }



  // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
  async speakEnglish(text) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testText = text.length > 50 ? text.substring(0, 50) + '...' : text;
      console.log('TTS: Using test text:', testText);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ TTS –º–æ–¥–µ–ª–∏
      let response;
      try {
        console.log('TTS: Trying MeloTTS model...');
        response = await this.ai.run('@cf/myshell-ai/melotts', {
          prompt: testText,
          lang: 'en'
        });
      } catch (error) {
        console.log('TTS: MeloTTS failed, trying OpenAI TTS...');
        response = await this.ai.run('@cf/openai/tts-1', {
          text: testText,
          voice: 'alloy'
        });
      }

      return {
        success: true,
        audio: response,
        prompt: text,
        lang: 'en'
      };
    } catch (error) {
      console.error('Error in TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  async speakSlowly(text) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testText = text.length > 50 ? text.substring(0, 50) + '...' : text;
      console.log('TTS: Using test text:', testText);
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ TTS –º–æ–¥–µ–ª–∏
      let response;
      try {
        console.log('TTS: Trying MeloTTS model...');
        response = await this.ai.run('@cf/myshell-ai/melotts', {
          prompt: testText,
          lang: 'en'
        });
      } catch (error) {
        console.log('TTS: MeloTTS failed, trying OpenAI TTS...');
        response = await this.ai.run('@cf/openai/tts-1', {
          text: testText,
          voice: 'alloy'
        });
      }

      return {
        success: true,
        audio: response,
        prompt: text,
        lang: 'en',
        speed: 'slow'
      };
    } catch (error) {
      console.error('Error in slow TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  async speakWithPronunciation(text) {
    try {
      const words = text.split(' ');
      const slowText = words.join(' ... ');
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: slowText,
        lang: 'en'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        slowText: slowText,
        lang: 'en',
        speed: 'pronunciation'
      };
    } catch (error) {
      console.error('Error in pronunciation TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }

  async speakDialogue(dialogue) {
    try {
      const fullText = Array.isArray(dialogue) ? dialogue.join('\n\n') : dialogue;
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: fullText,
        lang: 'en'
      });

      return {
        success: true,
        audio: response,
        prompt: fullText,
        lang: 'en',
        type: 'dialogue'
      };
    } catch (error) {
      console.error('Error in dialogue TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: dialogue
      };
    }
  }

  async speakExample(example) {
    try {
      let textToSpeak = '';
      
      if (Array.isArray(example.english)) {
        textToSpeak = example.english.join('\n\n');
      } else {
        textToSpeak = example.english;
      }

      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: textToSpeak,
        lang: 'en'
      });

      return {
        success: true,
        audio: response,
        prompt: textToSpeak,
        russian: example.russian,
        conprompt: example.context,
        voice: voice
      };
    } catch (error) {
      console.error('Error in example TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: example.english
      };
    }
  }

  async speakWithRepeat(text, repeatCount = 2) {
    try {
      const repeatedText = Array(repeatCount).fill(text).join('\n\n');
      
      const response = await this.ai.run('@cf/myshell-ai/melotts', {
        prompt: repeatedText,
        lang: 'en'
      });

      return {
        success: true,
        audio: response,
        prompt: text,
        repeatedText: repeatedText,
        lang: 'en',
        repeatCount: repeatCount
      };
    } catch (error) {
      console.error('Error in repeat TTS:', error);
      return {
        success: false,
        error: error.message,
        prompt: text
      };
    }
  }
}

export function createTTSService(ai, telegramService) {
  return new TTSService(ai, telegramService);
}
