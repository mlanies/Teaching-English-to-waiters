import { handleStartCommand } from '../commands/start.js';
import { 
  handleLessonCommand, 
  handleLessonCategoryCommand,
  handleTextLessonsCommand,
  handleChoiceLessonsCommand 
} from '../commands/lesson.js';
import { handleProfileCommand } from '../commands/profile.js';
import { handleAchievementsCommand, handleAllAchievementsCommand } from '../commands/achievements.js';
import { handleHelpCommand } from '../commands/help.js';
import { handleAboutCommand } from '../commands/about.js';
import { handleLeaderboardCommand, handleLeaderboardCallback } from '../commands/leaderboard.js';
import { 
  handleExamplesCommand, 
  handleExamplesCategoryCommand, 
  handleExampleCommand, 
  handleTTSCommand,
  handleRandomExampleCommand 
} from '../commands/examples.js';
import { processLessonAnswer, completeLesson, getMainMenuKeyboard } from './lessonService.js';
import { getCategories, getLessonsByCategory } from './lessonData.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function getNextQuestionKeyboard(question) {
  if (question.type === 'multiple_choice') {
    return {
      inline_keyboard: [
        ...question.options.map(option => 
          [{ text: option, callback_data: `answer:${option}` }]
        ),
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'next_question' },
          { text: 'üìä –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' }
        ]
      ]
    };
  } else {
    return {
      inline_keyboard: [
        [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_hints' }],
        [{ text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'text_answer' }],
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'next_question' },
          { text: 'üìä –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' }
        ]
      ]
    };
  }
}

export async function processCallbackData(data, user, session, env) {
  try {
    console.log('Processing callback data:', data);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
    if (data.startsWith('leaderboard_')) {
      const period = data.replace('leaderboard_', '');
      return await handleLeaderboardCallback(user, period, env);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Ä–æ–∫–æ–≤
    if (data.startsWith('category_')) {
      const category = data.replace('category_', '');
      return await handleCategorySelection(user, category, session, env);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤
    if (data.startsWith('text_category_')) {
      const category = data.replace('text_category_', '');
      return await handleTextCategorySelection(user, category, session, env);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π choice —É—Ä–æ–∫–æ–≤
    if (data.startsWith('choice_category_')) {
      const category = data.replace('choice_category_', '');
      return await handleChoiceCategorySelection(user, category, session, env);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
    if (data.startsWith('examples_')) {
      const action = data.replace('examples_', '');
      return await handleExamplesAction(user, action, session, env);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    if (data.startsWith('example_')) {
      const withoutPrefix = data.replace('example_', '');
      const firstUnderscoreIndex = withoutPrefix.indexOf('_');
      
      if (firstUnderscoreIndex !== -1) {
        const categoryId = withoutPrefix.substring(0, firstUnderscoreIndex);
        const exampleId = withoutPrefix.substring(firstUnderscoreIndex + 1);

        return await handleExampleCommand(user, categoryId, exampleId, session, env);
      } else {
        console.log('Invalid example callback format:', data);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ TTS
    if (data.startsWith('tts_')) {
      const withoutPrefix = data.replace('tts_', '');
      const parts = withoutPrefix.split('_');
      
      if (parts.length >= 3) {
        const categoryId = parts[0];
        // –î–ª—è exampleId –Ω—É–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π
        const ttsType = parts[parts.length - 1];
        const exampleId = parts.slice(1, -1).join('_');

        return await handleTTSCommand(user, categoryId, exampleId, ttsType, session, env);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if (data.startsWith('social_')) {
      const action = data.replace('social_', '');
      return await handleSocialAction(user, action, session, env);
    }

    switch (data) {
      case 'start_lesson':
        return await handleLessonCommand(user, session, env);
        
      case 'text_lessons':
        return await handleTextLessonsCommand(user, session, env);
        
      case 'choice_lessons':
        return await handleChoiceLessonsCommand(user, session, env);
        
      case 'profile':
        return await handleProfileCommand(user, session, env);
        
      case 'achievements':
        return await handleAchievementsCommand(user, session, env);
        
      case 'all_achievements':
        return await handleAllAchievementsCommand(user, session, env);
        
      case 'detailed_stats':
        return await handleDetailedStatsCommand(user, session, env);
        
      case 'learning_goals':
        return await handleLearningGoalsCommand(user, session, env);
        
      case 'help':
        return await handleHelpCommand(user, session);
        
      case 'about':
        return await handleAboutCommand(user, session, env);
        
      case 'leaderboard':
        return await handleLeaderboardCommand(user, env);
        
      case 'examples':
        return await handleExamplesCommand(user, session, env);
        
      case 'competitions':
        return await handleCompetitionsCommand(user, env);
        
      case 'study_groups':
        return await handleStudyGroupsCommand(user, env);
        
      case 'back_to_main':
        return {
          message: `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>${user.first_name}</b>!\n\nüçΩÔ∏è <b>English for Waiters</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º.\n\nüìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>${user.level}</b>\n‚≠ê –û–ø—ã—Ç: <b>${user.experience_points}</b> XP\nüìö –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: <b>${user.total_lessons_completed}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
          keyboard: getMainMenuKeyboard(),
          newSession: { ...session, state: 'main_menu' }
        };
        
      case 'next_lesson':
        return await handleLessonCommand(user, session, env);
        
      case 'lesson_categories':
        return await handleLessonCategoryCommand(user, session, env);
        
      case 'main_menu':
        return {
          message: `üçΩÔ∏è <b>English for Waiters</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
          keyboard: getMainMenuKeyboard(),
          newSession: { ...session, state: 'main_menu' }
        };
        
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–∫–∏
        if (data.startsWith('answer:')) {
          const answer = data.replace('answer:', '');
          return await processLessonAnswer(answer, user, session, env);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (data === 'show_hints') {
          return {
            message: `üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n\n` +
              `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n` +
              `‚Ä¢ –í–µ–∂–ª–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã\n` +
              `‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É\n` +
              `‚Ä¢ –ü–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n` +
              `–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.`,
            keyboard: {
              inline_keyboard: [
                [{ text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'text_answer' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_question' }]
              ]
            }
          };
        }
        
        // –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if (data === 'next_question') {
          if (session.currentLesson && session.currentLesson.currentQuestionIndex < session.currentLesson.questions.length) {
            const nextQuestion = session.currentLesson.questions[session.currentLesson.currentQuestionIndex];
            return {
              message: `üìù <b>–í–æ–ø—Ä–æ—Å ${session.currentLesson.currentQuestionIndex + 1} –∏–∑ ${session.currentLesson.questions.length}</b>\n\n${nextQuestion.text}`,
              keyboard: getNextQuestionKeyboard(nextQuestion),
              newSession: session
            };
          }
        }
        
        // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å
        if (data === 'skip_question') {
          if (session.currentLesson) {
            const updatedLesson = {
              ...session.currentLesson,
              currentQuestionIndex: session.currentLesson.currentQuestionIndex + 1,
              skippedQuestions: [...(session.currentLesson.skippedQuestions || []), session.currentLesson.currentQuestionIndex]
            };
            
            if (updatedLesson.currentQuestionIndex >= updatedLesson.questions.length) {
              return await completeLesson(user, updatedLesson, session, env);
            }
            
            const nextQuestion = updatedLesson.questions[updatedLesson.currentQuestionIndex];
            return {
              message: `‚è≠Ô∏è –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω!\n\nüìù <b>–í–æ–ø—Ä–æ—Å ${updatedLesson.currentQuestionIndex + 1} –∏–∑ ${updatedLesson.questions.length}</b>\n\n${nextQuestion.text}`,
              keyboard: getNextQuestionKeyboard(nextQuestion),
              newSession: { ...session, currentLesson: updatedLesson }
            };
          }
        }
        
        return {
          message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          keyboard: {
            inline_keyboard: [
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
    }
  } catch (error) {
    console.error('Error processing callback data:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function handleCategorySelection(user, category, session, env) {
  try {
    const categories = getCategories();
    const selectedCategory = categories.find(cat => cat.id === category);
    
    if (!selectedCategory) {
      return {
        message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'lesson_categories' }]
          ]
        }
      };
    }
    
    const lessons = getLessonsByCategory(category);
    const availableLessons = lessons.filter(lesson => lesson.difficulty_level <= user.level + 1);
    
    if (availableLessons.length === 0) {
      return {
        message: `üìö <b>${selectedCategory.name}</b>\n\n${selectedCategory.description}\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'lesson_categories' }]
          ]
        }
      };
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const randomLesson = availableLessons[Math.floor(Math.random() * availableLessons.length)];
    
    const lessonSession = {
      ...session,
      currentLesson: {
        ...randomLesson,
        currentQuestionIndex: 0,
        startTime: Date.now(),
        answers: [],
        skippedQuestions: []
      },
      state: 'in_lesson'
    };
    
    const firstQuestion = randomLesson.content.questions[0];
    
    return {
      message: `üìö <b>${randomLesson.title}</b>\n\n${randomLesson.description}\n\nüìù <b>–í–æ–ø—Ä–æ—Å 1 –∏–∑ ${randomLesson.content.questions.length}</b>\n\n${firstQuestion.text}`,
      keyboard: getNextQuestionKeyboard(firstQuestion),
      newSession: lessonSession
    };
    
  } catch (error) {
    console.error('Error in category selection:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
async function handleExamplesAction(user, action, session, env) {
  try {
    if (action.startsWith('category_')) {
      const categoryId = action.replace('category_', '');
      return await handleExamplesCategoryCommand(user, categoryId, session, env);
    } else if (action.startsWith('random_')) {
      const categoryId = action.replace('random_', '');
      return await handleRandomExampleCommand(user, categoryId || null, session, env);
    } else if (action === 'random') {
      return await handleRandomExampleCommand(user, null, session, env);
    } else if (action === 'search') {
      return {
        message: 'üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑ –∏ –¥–∏–∞–ª–æ–≥–æ–≤.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
          ]
        },
        newSession: { ...session, state: 'searching_examples' }
      };
    }
    
    return await handleExamplesCommand(user, session, env);
    
  } catch (error) {
    console.error('Error in examples action:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async function handleSocialAction(user, action, session, env) {
  try {
    switch (action) {
      case 'leaderboard':
        return await handleLeaderboardCommand(user, env);
        
      case 'competitions':
        return await handleCompetitionsCommand(user, env);
        
      case 'study_groups':
        return await handleStudyGroupsCommand(user, env);
        
      default:
        return {
          message: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
          keyboard: {
            inline_keyboard: [
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
    }
  } catch (error) {
    console.error('Error in social action:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
async function handleDetailedStatsCommand(user, session, env) {
  return {
    message: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
    keyboard: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
      ]
    }
  };
}

async function handleLearningGoalsCommand(user, session, env) {
  return {
    message: 'üéØ –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
    keyboard: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
      ]
    }
  };
}

async function handleCompetitionsCommand(user, env) {
  return {
    message: 'üéØ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
    keyboard: {
      inline_keyboard: [
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };
}

async function handleStudyGroupsCommand(user, env) {
  return {
    message: 'üë• –ì—Ä—É–ø–ø—ã –æ–±—É—á–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.',
    keyboard: {
      inline_keyboard: [
        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤
async function handleTextCategorySelection(user, category, session, env) {
  try {
    const categories = getCategories();
    const selectedCategory = categories.find(cat => cat.id === category);
    
    if (!selectedCategory) {
      return {
        message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'text_lessons' }]
          ]
        }
      };
    }
    
    const lessons = getLessonsByCategory(category);
    const availableLessons = lessons.filter(lesson => lesson.difficulty_level <= user.level + 1);
    
    if (availableLessons.length === 0) {
      return {
        message: `üìö <b>${selectedCategory.name}</b>\n\n${selectedCategory.description}\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'text_lessons' }]
          ]
        }
      };
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const randomLesson = availableLessons[Math.floor(Math.random() * availableLessons.length)];
    
    const lessonSession = {
      ...session,
      currentLesson: {
        ...randomLesson,
        currentQuestionIndex: 0,
        startTime: Date.now(),
        answers: [],
        skippedQuestions: [],
        lessonType: 'text' // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —É—Ä–æ–∫–∞
      },
      state: 'in_lesson'
    };
    
    const firstQuestion = randomLesson.content.questions[0];
    
    return {
      message: `‚úçÔ∏è <b>${randomLesson.title}</b>\n\n${randomLesson.description}\n\nüìù <b>–í–æ–ø—Ä–æ—Å 1 –∏–∑ ${randomLesson.content.questions.length}</b>\n\n${firstQuestion.text}\n\nüí° <i>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º</i>`,
      keyboard: {
        inline_keyboard: [
          [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_hints' }],
          [
            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' },
            { text: 'üîô –í—ã–π—Ç–∏', callback_data: 'main_menu' }
          ]
        ]
      },
      newSession: lessonSession
    };
    
  } catch (error) {
    console.error('Error in handleTextCategorySelection:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è choice —É—Ä–æ–∫–æ–≤ (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤)
async function handleChoiceCategorySelection(user, category, session, env) {
  try {
    const categories = getCategories();
    const selectedCategory = categories.find(cat => cat.id === category);
    
    if (!selectedCategory) {
      return {
        message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'choice_lessons' }]
          ]
        }
      };
    }
    
    const lessons = getLessonsByCategory(category);
    const availableLessons = lessons.filter(lesson => lesson.difficulty_level <= user.level + 1);
    
    if (availableLessons.length === 0) {
      return {
        message: `üìö <b>${selectedCategory.name}</b>\n\n${selectedCategory.description}\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.`,
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'choice_lessons' }]
          ]
        }
      };
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    const randomLesson = availableLessons[Math.floor(Math.random() * availableLessons.length)];
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const firstQuestion = randomLesson.content.questions[0];
    const choices = generateChoicesForQuestion(firstQuestion);
    
    const lessonSession = {
      ...session,
      currentLesson: {
        ...randomLesson,
        currentQuestionIndex: 0,
        startTime: Date.now(),
        answers: [],
        skippedQuestions: [],
        lessonType: 'choice' // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —É—Ä–æ–∫–∞
      },
      state: 'in_lesson'
    };
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const choiceButtons = choices.map(choice => 
      [{ text: choice, callback_data: `answer:${choice}` }]
    );
    
    choiceButtons.push([
      { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' },
      { text: 'üîô –í—ã–π—Ç–∏', callback_data: 'main_menu' }
    ]);
    
    return {
      message: `‚òëÔ∏è <b>${randomLesson.title}</b>\n\n${randomLesson.description}\n\nüìù <b>–í–æ–ø—Ä–æ—Å 1 –∏–∑ ${randomLesson.content.questions.length}</b>\n\n${firstQuestion.text}\n\nüí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</i>`,
      keyboard: {
        inline_keyboard: choiceButtons
      },
      newSession: lessonSession
    };
    
  } catch (error) {
    console.error('Error in handleChoiceCategorySelection:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
function generateChoicesForQuestion(question) {
  const correctAnswer = question.correctAnswer;
  const allChoices = question.correctAnswers || [correctAnswer];
  
  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const wrongChoices = [
    "Good morning",
    "Thank you",
    "Please wait",
    "Excuse me",
    "Have a nice day",
    "See you later",
    "You're welcome",
    "I'm sorry"
  ];
  
  // –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ 2-3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
  const choices = [correctAnswer];
  const shuffledWrong = wrongChoices.filter(choice => 
    !allChoices.some(correct => correct.toLowerCase().includes(choice.toLowerCase()))
  ).sort(() => Math.random() - 0.5).slice(0, 3);
  
  choices.push(...shuffledWrong);
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  return choices.sort(() => Math.random() - 0.5);
}
