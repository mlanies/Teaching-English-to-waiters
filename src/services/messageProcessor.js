import { handleStartCommand } from '../commands/start.js';
import { handleLessonCommand } from '../commands/lesson.js';
import { handleProfileCommand } from '../commands/profile.js';
import { handleAchievementsCommand } from '../commands/achievements.js';
import { handleHelpCommand } from '../commands/help.js';
import { processLessonAnswer, getMainMenuKeyboard } from '../services/lessonService.js';
import { analyzeWithAI } from '../services/aiService.js';

export async function processMessage(text, user, session, env) {
  const lowerText = text.toLowerCase().trim();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (lowerText === '/start' || lowerText === '—Å—Ç–∞—Ä—Ç') {
    return await handleStartCommand(user, session);
  }

  if (lowerText === '/profile' || lowerText === '–ø—Ä–æ—Ñ–∏–ª—å') {
    return await handleProfileCommand(user, session);
  }

  if (lowerText === '/achievements' || lowerText === '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è') {
    return await handleAchievementsCommand(user, session, env);
  }

  if (lowerText === '/help' || lowerText === '–ø–æ–º–æ—â—å') {
    return await handleHelpCommand(user, session);
  }

  if (lowerText === '/lesson' || lowerText === '—É—Ä–æ–∫') {
    return await handleLessonCommand(user, session, env);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (session && session.state === 'waiting_for_name') {
    return {
      message: `üéâ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, <b>${text}</b>!\n\nüçΩÔ∏è <b>English for Waiters</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º.\n\nüìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>1</b>\n‚≠ê –û–ø—ã—Ç: <b>0</b> XP\nüìö –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: <b>0</b>\n\nüéØ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ–±—É—á–µ–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      keyboard: getMainMenuKeyboard(),
      newSession: { 
        ...session, 
        state: 'main_menu',
        lastActivity: Date.now(),
        userName: text
      }
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ä–æ–∫–∏
  if (session && session.currentLesson) {
    return await processLessonAnswer(text, user, session, env);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
  if (text.length > 10) {
    const aiAnalysis = await analyzeWithAI(env.AI, text, user);
    
    return {
      message: `ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n${aiAnalysis.feedback}\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${aiAnalysis.suggestions}`,
      keyboard: getMainMenuKeyboard(),
      newSession: { ...session, lastAIInteraction: Date.now() }
    };
  }

  // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
  return {
    message: `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! üëã\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    keyboard: getMainMenuKeyboard(),
    newSession: session || {}
  };
}


