import { getLessonById, getRandomLesson } from './lessonData.js';
import { updateUserProgress } from './userService.js';
import { analyzeWithAI } from './aiService.js';
import { createTTSService } from './ttsService.js';
import { createTelegramService } from './telegram.js';

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
export async function completeLesson(user, lesson, session, env) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —É—Ä–æ–∫–∞ (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ questions –∏–ª–∏ content.questions)
    const questions = lesson.questions || (lesson.content && lesson.content.questions);
    const questionsCount = questions ? questions.length : 1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const finalScore = Math.round(lesson.totalScore / questionsCount);
    await updateUserProgress(env.DB, user.id, lesson.id, finalScore, 
      Date.now() - lesson.startTime, lesson.answers.filter(a => !a.isCorrect).length);

    const message = `üéâ <b>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n` +
      `üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n` +
      `‚Ä¢ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${finalScore}/100\n` +
      `‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${lesson.answers.filter(a => a.isCorrect).length}/${questionsCount}\n` +
      `‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round((Date.now() - lesson.startTime) / 1000)} —Å–µ–∫\n\n` +
      `‚≠ê –ü–æ–ª—É—á–µ–Ω–æ XP: ${finalScore}\n` +
      `üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${user.level + (finalScore >= 80 ? 1 : 0)}\n\n` +
      `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n` +
      formatLessonRecommendations(lesson);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ —É—Ä–æ–∫–∞
    if (session.settings && session.settings.voiceFeedback) {
      await sendLessonSummaryVoice(user, lesson, finalScore, env);
    }

    return {
      message: message,
      keyboard: {
        inline_keyboard: [
          [
            { text: 'üìö –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫', callback_data: 'next_lesson' },
            { text: 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }
          ],
          [
            { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      },
      newSession: { ...session, state: 'lesson_completed' }
    };

  } catch (error) {
    console.error('Error completing lesson:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.',
      keyboard: getMainMenuKeyboard(),
      newSession: session
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async function sendVoiceAnalysis(user, question, userAnswer, aiAnalysis, env) {
  try {
    const telegramService = createTelegramService(env.TELEGRAM_BOT_TOKEN);
    const ttsService = createTTSService(env.AI, telegramService);
    
    await ttsService.speakLessonWithAnalysis(
      user.telegram_id,
      question,
      userAnswer,
      aiAnalysis
    );
  } catch (error) {
    console.error('Error sending voice analysis:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏—Ç–æ–≥–∞ —É—Ä–æ–∫–∞
async function sendLessonSummaryVoice(user, lesson, finalScore, env) {
  try {
    const telegramService = createTelegramService(env.TELEGRAM_BOT_TOKEN);
    const ttsService = createTTSService(env.AI, telegramService);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questions = lesson.questions || (lesson.content && lesson.content.questions);
    const questionsCount = questions ? questions.length : 1;
    
    const summaryText = `Lesson completed! Your final score is ${finalScore} out of 100. ` +
      `You answered ${lesson.answers.filter(a => a.isCorrect).length} out of ${questionsCount} questions correctly. ` +
      `Great job! Keep practicing to improve your English skills.`;
    
    await ttsService.speakEnglishAndSend(
      user.telegram_id,
      summaryText,
      `üéâ <b>–ò—Ç–æ–≥–∏ —É—Ä–æ–∫–∞</b>\n\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${finalScore}/100\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${lesson.answers.filter(a => a.isCorrect).length}/${questionsCount}`
    );
  } catch (error) {
    console.error('Error sending lesson summary voice:', error);
  }
}

export function checkAnswer(userAnswer, question) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  const correctAnswers = question.correctAnswers || [question.correctAnswer];
  const userAnswerLower = userAnswer.toLowerCase().trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (correctAnswers.some(answer => userAnswerLower === answer.toLowerCase().trim())) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
  return correctAnswers.some(answer => {
    const answerLower = answer.toLowerCase().trim();
    const answerWords = answerLower.split(' ').filter(word => word.length > 2);
    const userWords = userAnswerLower.split(' ').filter(word => word.length > 2);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const matchingWords = answerWords.filter(word => userWords.includes(word));
    
    // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
    if (answerWords.length <= 3) {
      return matchingWords.length >= Math.max(1, Math.floor(answerWords.length * 0.6));
    }
    
    return matchingWords.length >= Math.max(1, Math.floor(answerWords.length * 0.7));
  });
}

function calculateScore(isCorrect, aiScore) {
  if (isCorrect) {
    return Math.max(10, Math.round(aiScore * 20)); // 10-20 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
  }
  return Math.round(aiScore * 5); // 0-5 –±–∞–ª–ª–æ–≤ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
}

export function formatQuestionFeedback(isCorrect, aiAnalysis, nextQuestion) {
  let message = '';
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò –∏–ª–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
  const correctAnswer = aiAnalysis.correct_answer || aiAnalysis.correctAnswer || '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
  const explanation = aiAnalysis.explanation || '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
  
  if (isCorrect) {
    message = `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n` +
      `üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> ${explanation}\n\n` +
      `üìù <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n${nextQuestion.text}`;
  } else {
    message = `‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b>\n\n` +
      `‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> ${correctAnswer}\n\n` +
      `üí° <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> ${explanation}\n\n` +
      `üìù <b>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>\n${nextQuestion.text}`;
  }

  const keyboard = getNextQuestionKeyboard(nextQuestion);
  
  return { message, keyboard };
}

function formatLessonRecommendations(lesson) {
  const wrongAnswers = lesson.answers.filter(a => !a.isCorrect);
  
  if (wrongAnswers.length === 0) {
    return "üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.";
  }
  
  const recommendations = wrongAnswers.map(answer => 
    `‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞: ${answer.aiFeedback}`
  ).join('\n');
  
  return recommendations;
}

function getQuestionKeyboard(question) {
  if (question.type === 'multiple_choice') {
    return {
      inline_keyboard: question.options.map(option => 
        [{ text: option, callback_data: `answer:${option}` }]
      )
    };
  }
  
  return null; // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
}

function getNextQuestionKeyboard(question) {
  if (question.type === 'multiple_choice') {
    return {
      inline_keyboard: [
        ...question.options.map(option => 
          [{ text: option, callback_data: `answer:${option}` }]
        ),
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'next_question' },
          { text: 'üìä –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' }
        ]
      ]
    };
  } else {
    return {
      inline_keyboard: [
        [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_hints' }],
        [{ text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'text_answer' }],
        [
          { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'next_question' },
          { text: 'üìä –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' }
        ]
      ]
    };
  }
}

export function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: '‚úçÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã', callback_data: 'text_lessons' },
        { text: '‚òëÔ∏è –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞', callback_data: 'choice_lessons' }
      ],
      [
        { text: 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
        { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' }
      ],
      [
        { text: 'üèÖ –†–µ–π—Ç–∏–Ω–≥', callback_data: 'leaderboard' },
        { text: 'üìñ –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã', callback_data: 'examples' }
      ],
      [
        { text: 'üéØ –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', callback_data: 'competitions' },
        { text: 'üë• –ì—Ä—É–ø–ø—ã', callback_data: 'study_groups' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
        { text: '‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: 'about' }
      ]
    ]
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
export function generateChoicesForQuestion(question) {
  const correctAnswer = question.correctAnswer;
  const allChoices = question.correctAnswers || [correctAnswer];
  
  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const wrongChoices = [
    "Good morning",
    "Thank you",
    "Please wait",
    "Excuse me",
    "Have a nice day",
    "See you later",
    "You're welcome",
    "I'm sorry"
  ];
  
  // –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ 2-3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
  const choices = [correctAnswer];
  const shuffledWrong = wrongChoices.filter(choice => 
    !allChoices.some(correct => correct.toLowerCase().includes(choice.toLowerCase()))
  ).sort(() => Math.random() - 0.5).slice(0, 3);
  
  choices.push(...shuffledWrong);
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  return choices.sort(() => Math.random() - 0.5);
}

export async function processLessonAnswer(text, user, session, env) {
  try {
    const currentLesson = session.currentLesson;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —É—Ä–æ–∫–∞ (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ questions –∏–ª–∏ content.questions)
    const questions = currentLesson.questions || (currentLesson.content && currentLesson.content.questions);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –≤–æ–ø—Ä–æ—Å—ã
    if (!currentLesson || !questions || !Array.isArray(questions)) {
      console.error('Invalid lesson structure:', currentLesson);
      return {
        message: '‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ.',
        keyboard: getMainMenuKeyboard(),
        newSession: { ...session, currentLesson: null, state: 'main_menu' }
      };
    }
    
    const currentQuestion = questions[currentLesson.currentQuestionIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!currentQuestion) {
      console.error('Question not found at index:', currentLesson.currentQuestionIndex);
      return {
        message: '‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ.',
        keyboard: getMainMenuKeyboard(),
        newSession: { ...session, currentLesson: null, state: 'main_menu' }
      };
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
    const aiAnalysis = await analyzeWithAI(env.AI, text, user, currentQuestion);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    const isCorrect = checkAnswer(text, currentQuestion);
    const score = calculateScore(isCorrect, aiAnalysis.score);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞
    const updatedLesson = {
      ...currentLesson,
      answers: [...(currentLesson.answers || []), {
        question: currentLesson.currentQuestionIndex,
        userAnswer: text,
        isCorrect,
        aiScore: aiAnalysis.score,
        aiFeedback: aiAnalysis.feedback
      }],
      currentQuestionIndex: currentLesson.currentQuestionIndex + 1,
      totalScore: (currentLesson.totalScore || 0) + score
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
    if (updatedLesson.currentQuestionIndex >= questions.length) {
      return await completeLesson(user, updatedLesson, session, env);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const nextQuestion = questions[updatedLesson.currentQuestionIndex];
    const feedback = formatQuestionFeedback(isCorrect, aiAnalysis, nextQuestion);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ä–æ–∫–∞
    let keyboard = feedback.keyboard;
    
    if (currentLesson.lessonType === 'choice') {
      // –î–ª—è choice —É—Ä–æ–∫–æ–≤ —Å–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
      const choices = generateChoicesForQuestion(nextQuestion);
      const choiceButtons = choices.map(choice => 
        [{ text: choice, callback_data: `answer:${choice}` }]
      );
      
      choiceButtons.push([
        { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' },
        { text: 'üîô –í—ã–π—Ç–∏', callback_data: 'main_menu' }
      ]);
      
      keyboard = {
        inline_keyboard: choiceButtons
      };
    } else {
      // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      keyboard = {
        inline_keyboard: [
          [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_hints' }],
          [
            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_question' },
            { text: 'üîô –í—ã–π—Ç–∏', callback_data: 'main_menu' }
          ]
        ]
      };
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    if (session.settings && session.settings.voiceFeedback) {
      await sendVoiceAnalysis(user, currentQuestion, text, aiAnalysis, env);
    }
    
    return {
      message: feedback.message,
      keyboard: keyboard,
      newSession: {
        ...session,
        currentLesson: updatedLesson
      }
    };

  } catch (error) {
    console.error('Error processing lesson answer:', error);
    return {
      message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      keyboard: getMainMenuKeyboard(),
      newSession: session
    };
  }
}

export async function startLesson(user, session, env) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let lesson = null;
    
    try {
      const dbLesson = await env.DB.prepare(`
        SELECT * FROM lessons 
        WHERE is_active = 1 
        ORDER BY RANDOM() 
        LIMIT 1
      `).first();
      
      if (dbLesson) {
        lesson = {
          id: dbLesson.id,
          title: dbLesson.title,
          description: dbLesson.description,
          category: dbLesson.category,
          difficulty_level: dbLesson.difficulty_level,
          content: JSON.parse(dbLesson.content)
        };
      }
    } catch (dbError) {
      console.log('Database lesson not found, using static data');
    }
    
    // –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (!lesson) {
      lesson = getRandomLesson();
    }
    
    if (!lesson) {
      return {
        message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: getMainMenuKeyboard(),
        newSession: session
      };
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É—Ä–æ–∫–∞
    const lessonSession = {
      ...session,
      state: 'in_lesson',
      currentLesson: {
        id: lesson.id,
        title: lesson.title,
        questions: lesson.content.questions,
        currentQuestionIndex: 0,
        startTime: Date.now(),
        totalScore: 0,
        answers: []
      }
    };

    const firstQuestion = lesson.content.questions[0];
    const keyboard = getQuestionKeyboard(firstQuestion);

    return {
      message: `üìö <b>${lesson.title}</b>\n\n${firstQuestion.text}`,
      keyboard: keyboard,
      newSession: lessonSession
    };

  } catch (error) {
    console.error('Error starting lesson:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      keyboard: getMainMenuKeyboard(),
      newSession: session
    };
  }
}
