import { getRandomLesson, getCategories, getLessonsByCategory } from '../services/lessonData.js';

export async function handleLessonCommand(user, session, env) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lesson = getRandomLesson(null, user.level);
    
    if (!lesson) {
      return {
        message: '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
          ]
        },
        newSession: session
      };
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É—Ä–æ–∫–∞
    const lessonSession = {
      ...session,
      currentLesson: {
        id: lesson.id,
        title: lesson.title,
        category: lesson.category,
        questions: lesson.content.questions,
        currentQuestionIndex: 0,
        startTime: Date.now(),
        totalScore: 0,
        answers: [],
        skippedQuestions: []
      },
      state: 'in_lesson'
    };

    const firstQuestion = lesson.content.questions[0];
    
    const message = `üìö <b>–£—Ä–æ–∫: ${lesson.title}</b>\n\n` +
      `üìù ${lesson.description}\n\n` +
      `üìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${lesson.difficulty_level}/5\n` +
      `üéØ –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —É—Ä–æ–∫–µ: ${lesson.content.questions.length}\n\n` +
      `üìù <b>–í–æ–ø—Ä–æ—Å 1:</b>\n${firstQuestion.text}`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    let keyboard = null;
    
    if (firstQuestion.type === 'multiple_choice') {
      // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
      keyboard = {
        inline_keyboard: firstQuestion.options.map(option => 
          [{ text: option, callback_data: `answer:${option}` }]
        )
      };
    } else {
      // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      keyboard = {
        inline_keyboard: [
          [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏', callback_data: 'show_hints' }],
          [{ text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'text_answer' }]
        ]
      };
    }

    return {
      message: message,
      keyboard: keyboard,
      newSession: lessonSession
    };

  } catch (error) {
    console.error('Error in handleLessonCommand:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      },
      newSession: session
    };
  }
}

export async function handleLessonCategoryCommand(user, session, env) {
  try {
    const categories = getCategories();
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryButtons = categories.map(category => ({
      text: `${category.icon} ${category.name}`,
      callback_data: `category_${category.id}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    const keyboardRows = [];
    for (let i = 0; i < categoryButtons.length; i += 2) {
      const row = categoryButtons.slice(i, i + 2);
      keyboardRows.push(row);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboardRows.push([{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

    const message = `üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Ä–æ–∫–æ–≤:</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è (${user.level}).`;

    return {
      message: message,
      keyboard: {
        inline_keyboard: keyboardRows
      },
      newSession: { ...session, state: 'selecting_category' }
    };

  } catch (error) {
    console.error('Error in handleLessonCategoryCommand:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      },
      newSession: session
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function getCategoryInfo(categoryId) {
  const categories = getCategories();
  return categories.find(cat => cat.id === categoryId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function getAvailableLessonsInCategory(categoryId, userLevel) {
  const lessons = getLessonsByCategory(categoryId);
  return lessons.filter(lesson => lesson.difficulty_level <= userLevel + 1);
}
