import { 
  getAllCategories, 
  getExamplesByCategory, 
  getExampleById, 
  getRandomExample,
  searchExamples 
} from '../services/examplesService.js';
import { createTTSService } from '../services/ttsService.js';
import { createTelegramService } from '../services/telegram.js';

export async function handleExamplesCommand(user, session, env) {
  try {
    const categories = getAllCategories();
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryButtons = categories.map(category => ({
      text: `${getCategoryIcon(category.id)} ${category.title} (${category.count})`,
      callback_data: `examples_category_${category.id}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    const keyboardRows = [];
    for (let i = 0; i < categoryButtons.length; i += 2) {
      const row = categoryButtons.slice(i, i + 2);
      keyboardRows.push(row);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboardRows.push([
      { text: 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä', callback_data: 'examples_random' },
      { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'examples_search' }
    ]);
    keyboardRows.push([{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

    const message = `üìö <b>–ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Å—Ç—è–º–∏.\n\n` +
      `üéØ <b>–¶–µ–ª—å:</b> –ë—ã—Å—Ç—Ä–æ –æ—Å–≤–æ–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–º\n\n` +
      `üîä <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n` +
      `‚Ä¢ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑\n` +
      `‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n` +
      `‚Ä¢ –ü–æ —Å–ª–æ–≥–∞–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n` +
      `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`;

    return {
      message: message,
      keyboard: {
        inline_keyboard: keyboardRows
      },
      newSession: { ...session, state: 'examples_menu' }
    };

  } catch (error) {
    console.error('Error in examples command:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–æ–≤.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
  }
}

export async function handleExamplesCategoryCommand(user, categoryId, session, env) {
  try {
    const categoryExamples = getExamplesByCategory(categoryId);
    
    if (!categoryExamples) {
      return {
        message: '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
          ]
        }
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    const exampleButtons = categoryExamples.examples.map(example => ({
      text: `${getDifficultyIcon(example.difficulty)} ${example.title}`,
      callback_data: `example_${categoryId}_${example.id}`
    }));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 1 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    const keyboardRows = exampleButtons.map(button => [button]);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboardRows.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'examples' },
      { text: 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π', callback_data: `examples_random_${categoryId}` }
    ]);

    const message = `üìö <b>${categoryExamples.title}</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n` +
      `üìù –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: ${categoryExamples.examples.length}\n` +
      `üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: –æ—Ç 1 –¥–æ 5\n\n` +
      `üîä –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –º–æ–∂–Ω–æ –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö`;

    return {
      message: message,
      keyboard: {
        inline_keyboard: keyboardRows
      },
      newSession: { ...session, state: 'examples_category', currentCategory: categoryId }
    };

  } catch (error) {
    console.error('Error in examples category command:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
        ]
      }
    };
  }
}

export async function handleExampleCommand(user, categoryId, exampleId, session, env) {
  try {
    const example = getExampleById(categoryId, exampleId);
    
    if (!example) {
      return {
        message: '‚ùå –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `examples_category_${categoryId}` }]
          ]
        }
      };
    }

    let message = `üìö <b>${example.title}</b>\n\n`;
    
    if (Array.isArray(example.english)) {
      // –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
      message += `üá∑üá∫ <b>–†—É—Å—Å–∫–∏–π:</b>\n`;
      example.russian.forEach((line, index) => {
        message += `${index + 1}. ${line}\n`;
      });
      
      message += `\nüá∫üá∏ <b>English:</b>\n`;
      example.english.forEach((line, index) => {
        message += `${index + 1}. ${line}\n`;
      });
    } else {
      // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ—Ä–∞–∑
      message += `üá∑üá∫ <b>–†—É—Å—Å–∫–∏–π:</b>\n${example.russian}\n\n`;
      message += `üá∫üá∏ <b>English:</b>\n${example.english}\n\n`;
    }
    
    message += `\nüìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> ${example.context}\n`;
    message += `üéØ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> ${example.difficulty}/5\n\n`;
    message += `üîä <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:</b>`;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    const ttsButtons = [
      [
        { text: 'üîä –û–∑–≤—É—á–∏—Ç—å', callback_data: `tts_${categoryId}_${exampleId}_normal` },
        { text: 'üêå –ú–µ–¥–ª–µ–Ω–Ω–æ', callback_data: `tts_${categoryId}_${exampleId}_slow` }
      ],
      [
        { text: 'üìñ –ü–æ —Å–ª–æ–≥–∞–º', callback_data: `tts_${categoryId}_${exampleId}_pronunciation` },
        { text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: `tts_${categoryId}_${exampleId}_repeat` }
      ]
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    ttsButtons.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: `examples_category_${categoryId}` },
      { text: 'üìö –°–ª–µ–¥—É—é—â–∏–π', callback_data: `example_next_${categoryId}_${exampleId}` }
    ]);

    return {
      message: message,
      keyboard: {
        inline_keyboard: ttsButtons
      },
      newSession: { ...session, state: 'viewing_example', currentExample: { categoryId, exampleId } }
    };

  } catch (error) {
    console.error('Error in example command:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–º–µ—Ä–∞.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
        ]
      }
    };
  }
}

export async function handleTTSCommand(user, categoryId, exampleId, ttsType, session, env) {
  try {
    const example = getExampleById(categoryId, exampleId);
    
    if (!example) {
      return {
        message: '‚ùå –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `examples_category_${categoryId}` }]
          ]
        }
      };
    }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    const telegramService = createTelegramService(env.TELEGRAM_BOT_TOKEN);
    const ttsService = createTTSService(env.AI, telegramService);
    
    let ttsResult;
    const chatId = user.telegram_id;

    switch (ttsType) {
      case 'slow':
        ttsResult = await ttsService.speakSlowlyAndSend(chatId, example.english);
        break;
      case 'pronunciation':
        ttsResult = await ttsService.speakWithPronunciationAndSend(chatId, example.english);
        break;
      case 'repeat':
        ttsResult = await ttsService.speakWithRepeatAndSend(chatId, example.english);
        break;
      default:
        ttsResult = await ttsService.speakEnglishAndSend(chatId, example.english);
    }

    if (ttsResult.success) {
      const message = `üîä <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n` +
        `üìö ${example.title}\n` +
        `üá∫üá∏ ${example.english}\n\n` +
        `‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n` +
        `üéµ –¢–∏–ø: ${getTTSTypeName(ttsType)}\n\n` +
        `üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`;

      return {
        message: message,
        keyboard: {
          inline_keyboard: [
            [
              { text: 'üîä –û–∑–≤—É—á–∏—Ç—å', callback_data: `tts_${categoryId}_${exampleId}_normal` },
              { text: 'üêå –ú–µ–¥–ª–µ–Ω–Ω–æ', callback_data: `tts_${categoryId}_${exampleId}_slow` }
            ],
            [
              { text: 'üìñ –ü–æ —Å–ª–æ–≥–∞–º', callback_data: `tts_${categoryId}_${exampleId}_pronunciation` },
              { text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: `tts_${categoryId}_${exampleId}_repeat` }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä—É', callback_data: `example_${categoryId}_${exampleId}` }
            ]
          ]
        }
      };
    } else {
      return {
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${ttsResult.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.`,
        keyboard: {
          inline_keyboard: [
            [
              { text: 'üîä –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `tts_${categoryId}_${exampleId}_normal` },
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `example_${categoryId}_${exampleId}` }
            ]
          ]
        }
      };
    }

  } catch (error) {
    console.error('Error in TTS command:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä—É', callback_data: `example_${categoryId}_${exampleId}` }]
        ]
      }
    };
  }
}

export async function handleRandomExampleCommand(user, categoryId = null, session, env) {
  try {
    const example = getRandomExample(categoryId);
    
    if (!example) {
      return {
        message: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä.',
        keyboard: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
          ]
        }
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    const actualCategoryId = categoryId || findCategoryByExample(example);
    
    return await handleExampleCommand(user, actualCategoryId, example.id, session, env);

  } catch (error) {
    console.error('Error in random example command:', error);
    return {
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.',
      keyboard: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–º–µ—Ä–∞–º', callback_data: 'examples' }]
        ]
      }
    };
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCategoryIcon(categoryId) {
  const icons = {
    'greeting': 'üëã',
    'menu': 'üìã',
    'ordering': 'üìù',
    'payment': 'üí≥',
    'problems': 'üö®',
    'fine_dining': 'üç∑',
    'fast_food': 'üçî',
    'dialogues': 'üí¨'
  };
  return icons[categoryId] || 'üìö';
}

function getDifficultyIcon(difficulty) {
  const icons = {
    1: 'üü¢',
    2: 'üü°',
    3: 'üü†',
    4: 'üî¥',
    5: 'üü£'
  };
  return icons[difficulty] || '‚ö™';
}

function getTTSTypeName(type) {
  const names = {
    'normal': '–û–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å',
    'slow': '–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å',
    'pronunciation': '–ü–æ —Å–ª–æ–≥–∞–º',
    'repeat': '–° –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º'
  };
  return names[type] || '–û–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å';
}

function findCategoryByExample(example) {
  // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID –ø—Ä–∏–º–µ—Ä–∞
  const idPrefix = example.id.split('_')[0];
  const categoryMap = {
    'greet': 'greeting',
    'menu': 'menu',
    'order': 'ordering',
    'pay': 'payment',
    'problem': 'problems',
    'fine': 'fine_dining',
    'fast': 'fast_food',
    'dialogue': 'dialogues'
  };
  return categoryMap[idPrefix] || 'greeting';
}
